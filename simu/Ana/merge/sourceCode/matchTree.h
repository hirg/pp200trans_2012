

#include <TFile.h>
#include <TTree.h>

#include <string>
#include <sstream>
#include <map>
#include <iostream>
#include <fstream>

using namespace std;


//__Tree_variables_____________________
int     ptHmin;
int     ptVmin;
int     ptVmax;

double  weight_pt_hard;
double  weight_pt_v0;
double  weight_pvz;
double  weight_run;

int     trig[4];
int     trig_sub[4];

int     m_runN;
int     m_evtN;
double  magn;
double  m_pvx;
double  m_pvy;
double  m_pvz;
int     g_runN;
int     g_evtN;
int     g_idSubproc;
double  g_pvx;
double  g_pvy;
double  g_pvz;
int     g_pv_geantProc;
int     g_pv_geantMedium;
int     g_pv_generatorProc;
int     g_pv_key;
int     g_nJets;

int     g_idParton1;
double  g_pxParton1;
double  g_pyParton1;
double  g_pzParton1;
double  g_mParton1;
double  g_eParton1;
int     g_idParton2;
double  g_pxParton2;
double  g_pyParton2;
double  g_pzParton2;
double  g_mParton2;
double  g_eParton2;

double  p_s;
double  p_t;
double  p_u;
double  p_y;
double  p_ptHard;
double  p_cosTheta;
double  p_x1;
double  p_x2;
int     p_f1;
int     p_f2;
int     p_f3;
int     p_f4;

int     g_nL;
int     g_pid_Lp[100];
int     g_gid_Lp[100];
int     g_key_Lp[100];
double  g_e_Lp[100];
double  g_pt_Lp[100];
double  g_eta_Lp[100];
double  g_phi_Lp[100];
double  g_im_Lp[100];
int     g_pid_Lpi[100];
int     g_gid_Lpi[100];
int     g_key_Lpi[100];
double  g_e_Lpi[100];
double  g_pt_Lpi[100];
double  g_eta_Lpi[100];
double  g_phi_Lpi[100];
double  g_im_Lpi[100];
double  g_x_stop_L[100];
double  g_y_stop_L[100];
double  g_z_stop_L[100];
int     g_pid_L[100];
int     g_gid_L[100];
int     g_key_L[100];
double  g_e_L[100];
double  g_pt_L[100];
double  g_eta_L[100];
double  g_phi_L[100];
double  g_im_L[100];
double  g_x_start_L[100];
double  g_y_start_L[100];
double  g_z_start_L[100];
int     g_pid_parent_L[100];
int     g_gid_parent_L[100];
int     g_key_parent_L[100];
double  g_drParton1_L[100];
double  g_drParton2_L[100];

int     g_index_L[100];
int     g_type_L[100];
double  g_dr_L[100];
double  g_deta_L[100];
double  g_dphi_L[100];

int     g_nA;
int     g_pid_Ap[100];
int     g_gid_Ap[100];
int     g_key_Ap[100];
double  g_e_Ap[100];
double  g_pt_Ap[100];
double  g_eta_Ap[100];
double  g_phi_Ap[100];
double  g_im_Ap[100];
int     g_pid_Api[100];
int     g_gid_Api[100];
int     g_key_Api[100];
double  g_e_Api[100];
double  g_pt_Api[100];
double  g_eta_Api[100];
double  g_phi_Api[100];
double  g_im_Api[100];
double  g_x_stop_A[100];
double  g_y_stop_A[100];
double  g_z_stop_A[100];
int     g_pid_A[100];
int     g_gid_A[100];
int     g_key_A[100];
double  g_e_A[100];
double  g_pt_A[100];
double  g_eta_A[100];
double  g_phi_A[100];
double  g_im_A[100];
double  g_x_start_A[100];
double  g_y_start_A[100];
double  g_z_start_A[100];
int     g_pid_parent_A[100];
int     g_gid_parent_A[100];
int     g_key_parent_A[100];
double  g_drParton1_A[100];
double  g_drParton2_A[100];

int     g_index_A[100];
int     g_type_A[100];
double  g_dr_A[100];
double  g_deta_A[100];
double  g_dphi_A[100];

int     g_nK;
int     g_pid_Kp[100];
int     g_gid_Kp[100];
int     g_key_Kp[100];
double  g_e_Kp[100];
double  g_pt_Kp[100];
double  g_eta_Kp[100];
double  g_phi_Kp[100];
double  g_im_Kp[100];
int     g_pid_Kpi[100];
int     g_gid_Kpi[100];
int     g_key_Kpi[100];
double  g_e_Kpi[100];
double  g_pt_Kpi[100];
double  g_eta_Kpi[100];
double  g_phi_Kpi[100];
double  g_im_Kpi[100];
double  g_x_stop_K[100];
double  g_y_stop_K[100];
double  g_z_stop_K[100];
int     g_pid_K[100];
int     g_gid_K[100];
int     g_key_K[100];
double  g_e_K[100];
double  g_pt_K[100];
double  g_eta_K[100];
double  g_phi_K[100];
double  g_im_K[100];
double  g_x_start_K[100];
double  g_y_start_K[100];
double  g_z_start_K[100];
int     g_pid_parent_K[100];
int     g_gid_parent_K[100];
int     g_key_parent_K[100];
double  g_drParton1_K[100];
double  g_drParton2_K[100];

int     g_index_K[100];
int     g_type_K[100];
double  g_dr_K[100];
double  g_deta_K[100];
double  g_dphi_K[100];


int     a_nL;
int     a_pid_Lp[100];
int     a_gid_Lp[100];
int     a_key_Lp[100];
double  a_e_Lp[100];
double  a_pt_Lp[100];
double  a_eta_Lp[100];
double  a_phi_Lp[100];
double  a_dca_Lp[100];
int     a_flag_Lp[100];
int     a_nFit_Lp[100];
double  a_ratio_Lp[100];
int     a_pid_Lpi[100];
int     a_gid_Lpi[100];
int     a_key_Lpi[100];
double  a_e_Lpi[100];
double  a_pt_Lpi[100];
double  a_eta_Lpi[100];
double  a_phi_Lpi[100];
double  a_dca_Lpi[100];
int     a_flag_Lpi[100];
int     a_nFit_Lpi[100];
double  a_ratio_Lpi[100];
double  a_x_stop_L[100];
double  a_y_stop_L[100];
double  a_z_stop_L[100];
double  a_pt_L[100];
double  a_eta_L[100];
double  a_phi_L[100];
double  a_im_L[100];
double  a_dl_L[100];
double  a_dca2_L[100];
double  a_dcaV0_L[100];
double  a_crp_L[100];
int     a_pid_parent_L[100];
int     a_gid_parent_L[100];
int     a_key_parent_L[100];
double  a_drParton1_L[100];
double  a_drParton2_L[100];

int     a_index_L[100];
int     a_type_L[100];
double  a_dr_L[100];
double  a_deta_L[100];
double  a_dphi_L[100];


int     a_nA;
int     a_pid_Ap[100];
int     a_gid_Ap[100];
int     a_key_Ap[100];
double  a_e_Ap[100];
double  a_pt_Ap[100];
double  a_eta_Ap[100];
double  a_phi_Ap[100];
double  a_dca_Ap[100];
int     a_flag_Ap[100];
int     a_nFit_Ap[100];
double  a_ratio_Ap[100];
int     a_pid_Api[100];
int     a_gid_Api[100];
int     a_key_Api[100];
double  a_e_Api[100];
double  a_pt_Api[100];
double  a_eta_Api[100];
double  a_phi_Api[100];
double  a_dca_Api[100];
int     a_flag_Api[100];
int     a_nFit_Api[100];
double  a_ratio_Api[100];
double  a_x_stop_A[100];
double  a_y_stop_A[100];
double  a_z_stop_A[100];
double  a_pt_A[100];
double  a_eta_A[100];
double  a_phi_A[100];
double  a_im_A[100];
double  a_dl_A[100];
double  a_dca2_A[100];
double  a_dcaV0_A[100];
double  a_crp_A[100];
int     a_pid_parent_A[100];
int     a_gid_parent_A[100];
int     a_key_parent_A[100];
double  a_drParton1_A[100];
double  a_drParton2_A[100];

int     a_index_A[100];
int     a_type_A[100];
double  a_dr_A[100];
double  a_deta_A[100];
double  a_dphi_A[100];

int     a_nK;
int     a_pid_Kp[100];
int     a_gid_Kp[100];
int     a_key_Kp[100];
double  a_e_Kp[100];
double  a_pt_Kp[100];
double  a_eta_Kp[100];
double  a_phi_Kp[100];
double  a_dca_Kp[100];
int     a_flag_Kp[100];
int     a_nFit_Kp[100];
double  a_ratio_Kp[100];
int     a_pid_Kpi[100];
int     a_gid_Kpi[100];
int     a_key_Kpi[100];
double  a_e_Kpi[100];
double  a_pt_Kpi[100];
double  a_eta_Kpi[100];
double  a_phi_Kpi[100];
double  a_dca_Kpi[100];
int     a_flag_Kpi[100];
int     a_nFit_Kpi[100];
double  a_ratio_Kpi[100];
double  a_x_stop_K[100];
double  a_y_stop_K[100];
double  a_z_stop_K[100];
double  a_pt_K[100];
double  a_eta_K[100];
double  a_phi_K[100];
double  a_im_K[100];
double  a_dl_K[100];
double  a_dca2_K[100];
double  a_dcaV0_K[100];
double  a_crp_K[100];
int     a_pid_parent_K[100];
int     a_gid_parent_K[100];
int     a_key_parent_K[100];
double  a_drParton1_K[100];
double  a_drParton2_K[100];

int     a_index_K[100];
int     a_type_K[100];
double  a_dr_K[100];
double  a_deta_K[100];
double  a_dphi_K[100];


int     m_nL;
double  m_dEdx_Lp[100];
double  m_nSigP_Lp[100];
double  m_nSigPi_Lp[100];
double  m_pt_Lp[100];
double  m_eta_Lp[100];
double  m_phi_Lp[100];
double  m_dca_Lp[100];
int     m_qaT_Lp[100];
int     m_idT_Lp[100];
int     m_tof_Lp[100];
double  m_beta_Lp[100];
double  m_dEdx_Lpi[100];
double  m_nSigP_Lpi[100];
double  m_nSigPi_Lpi[100];
double  m_pt_Lpi[100];
double  m_eta_Lpi[100];
double  m_phi_Lpi[100];
double  m_dca_Lpi[100];
int     m_qaT_Lpi[100];
int     m_idT_Lpi[100];
int     m_tof_Lpi[100];
double  m_beta_Lpi[100];
double  m_dca2_L[100];
double  m_dcaV0_L[100];
double  m_crp_L[100];
double  m_dl_L[100];
double  m_im_L[100];
double  m_V0x_L[100];
double  m_V0y_L[100];
double  m_V0z_L[100];
double  m_pt_L[100];
double  m_eta_L[100];
double  m_phi_L[100];
double  m_drParton1_L[100];
double  m_drParton2_L[100];

int     m_index_L[100];
int     m_type_L[100];
double  m_dr_L[100];
double  m_deta_L[100];
double  m_dphi_L[100];

int     m_nA;
double  m_dEdx_Ap[100];
double  m_nSigP_Ap[100];
double  m_nSigPi_Ap[100];
double  m_pt_Ap[100];
double  m_eta_Ap[100];
double  m_phi_Ap[100];
double  m_dca_Ap[100];
int     m_qaT_Ap[100];
int     m_idT_Ap[100];
int     m_tof_Ap[100];
double  m_beta_Ap[100];
double  m_dEdx_Api[100];
double  m_nSigP_Api[100];
double  m_nSigPi_Api[100];
double  m_pt_Api[100];
double  m_eta_Api[100];
double  m_phi_Api[100];
double  m_dca_Api[100];
int     m_qaT_Api[100];
int     m_idT_Api[100];
int     m_tof_Api[100];
double  m_beta_Api[100];
double  m_dca2_A[100];
double  m_dcaV0_A[100];
double  m_crp_A[100];
double  m_dl_A[100];
double  m_im_A[100];
double  m_V0x_A[100];
double  m_V0y_A[100];
double  m_V0z_A[100];
double  m_pt_A[100];
double  m_eta_A[100];
double  m_phi_A[100];
double  m_drParton1_A[100];
double  m_drParton2_A[100];

int     m_index_A[100];
int     m_type_A[100];
double  m_dr_A[100];
double  m_deta_A[100];
double  m_dphi_A[100];


int     m_nK;
double  m_dEdx_Kp[100];
double  m_nSigP_Kp[100];
double  m_nSigPi_Kp[100];
double  m_pt_Kp[100];
double  m_eta_Kp[100];
double  m_phi_Kp[100];
double  m_dca_Kp[100];
int     m_qaT_Kp[100];
int     m_idT_Kp[100];
int     m_tof_Kp[100];
double  m_beta_Kp[100];
double  m_dEdx_Kpi[100];
double  m_nSigP_Kpi[100];
double  m_nSigPi_Kpi[100];
double  m_pt_Kpi[100];
double  m_eta_Kpi[100];
double  m_phi_Kpi[100];
double  m_dca_Kpi[100];
int     m_qaT_Kpi[100];
int     m_idT_Kpi[100];
int     m_tof_Kpi[100];
double  m_beta_Kpi[100];
double  m_dca2_K[100];
double  m_dcaV0_K[100];
double  m_crp_K[100];
double  m_dl_K[100];
double  m_im_K[100];
double  m_V0x_K[100];
double  m_V0y_K[100];
double  m_V0z_K[100];
double  m_pt_K[100];
double  m_eta_K[100];
double  m_phi_K[100];
double  m_drParton1_K[100];
double  m_drParton2_K[100];

int     m_index_K[100];
int     m_type_K[100];
double  m_dr_K[100];
double  m_deta_K[100];
double  m_dphi_K[100];


int     IsJP0s;
int     IsJP1s;
int     IsJP2s;
int     IsAJPs;
int     njet;
int     J_sv[100];
double  J_deteta[100];
double  J_eta[100];
double  J_pt[100];
double  J_phi[100];
double  J_rt[100];
double  J_E[100];
double  J_btowEt[100];
double  J_tpcEt[100];
double  J_charge[100];
int     J_ncell[100];
int     J_ntra[100];
int     J_trackID[100][50];
double  J_drParton1[100];
double  J_drParton2[100];

//___Build_output_tree_____________________________________________________________________________________
void BuildTree_Out( TTree *T )
{
    T->Branch("ptHmin", &ptHmin, "ptHmin/I");
    T->Branch("ptVmin", &ptVmin, "ptVmin/I");
    T->Branch("ptVmax", &ptVmax, "ptVmax/I");
    T->Branch("weight_pt_hard", &weight_pt_hard, "weight_pt_hard/D");
    T->Branch("weight_pt_v0", &weight_pt_v0, "weight_pt_v0/D");
    T->Branch("weight_pvz", &weight_pvz, "weight_pvz/D");
    T->Branch("weight_run", &weight_run, "weight_run/D");

    T->Branch("p_s", &p_s, "p_s/D");
    T->Branch("p_t", &p_t, "p_t/D");
    T->Branch("p_u", &p_u, "p_u/D");
    T->Branch("p_y", &p_y, "p_y/D");
    T->Branch("p_ptHard", &p_ptHard, "p_ptHard/D");
    T->Branch("p_cosTheta", &p_cosTheta, "p_cosTheta/D");
    T->Branch("p_x1", &p_x1, "p_x1/D");
    T->Branch("p_x2", &p_x2, "p_x2/D");
    T->Branch("p_f1", &p_f1, "p_f1/I");
    T->Branch("p_f2", &p_f2, "p_f2/I");
    T->Branch("p_f3", &p_f3, "p_f3/I");
    T->Branch("p_f4", &p_f4, "p_f4/I");
	
    T->Branch("trig", trig, "trig[4]/I");
    T->Branch("trig_sub", trig_sub, "trig_sub[4]/I");

    T->Branch("g_runN", &g_runN, "g_runN/I");
    T->Branch("g_evtN", &g_evtN, "g_evtN/I");
    T->Branch("m_runN", &m_runN, "m_runN/I");
    T->Branch("m_evtN", &m_evtN, "m_evtN/I");
    T->Branch("g_idSubproc", &g_idSubproc, "g_idSubproc/I");
    T->Branch("g_pvx", &g_pvx, "g_pvx/D");
    T->Branch("g_pvy", &g_pvy, "g_pvy/D");
    T->Branch("g_pvz", &g_pvz, "g_pvz/D");
    T->Branch("m_pvx", &m_pvx, "m_pvx/D");
    T->Branch("m_pvy", &m_pvy, "m_pvy/D");
    T->Branch("m_pvz", &m_pvz, "m_pvz/D");
    T->Branch("g_pv_geantProc", &g_pv_geantProc, "g_pv_geantProc/I");
    T->Branch("g_pv_geantMedium", &g_pv_geantMedium, "g_pv_geantMedium/I");
    T->Branch("g_pv_generatorProc", &g_pv_generatorProc, "g_pv_generatorProc/I");
    T->Branch("g_pv_key", &g_pv_key, "g_pv_key/I");
    T->Branch("g_nJets", &g_nJets, "g_nJets/I");

    T->Branch("g_idParton1", &g_idParton1, "g_idParton1/I");
    T->Branch("g_pxParton1", &g_pxParton1, "g_pxParton1/D");
    T->Branch("g_pyParton1", &g_pyParton1, "g_pyParton1/D");
    T->Branch("g_pzParton1", &g_pzParton1, "g_pzParton1/D");
    T->Branch("g_mParton1", &g_mParton1, "g_mParton1/D");
    T->Branch("g_eParton1", &g_eParton1, "g_eParton1/D");
    T->Branch("g_idParton2", &g_idParton2, "g_idParton2/I");
    T->Branch("g_pxParton2", &g_pxParton2, "g_pxParton2/D");
    T->Branch("g_pyParton2", &g_pyParton2, "g_pyParton2/D");
    T->Branch("g_pzParton2", &g_pzParton2, "g_pzParton2/D");
    T->Branch("g_mParton2", &g_mParton2, "g_mParton2/D");
    T->Branch("g_eParton2", &g_eParton2, "g_eParton2/D");

    T->Branch("g_nL", &g_nL, "g_nL/I");
    T->Branch("g_pid_Lp", g_pid_Lp, "g_pid_Lp[g_nL]/I");
    T->Branch("g_gid_Lp", g_gid_Lp, "g_gid_Lp[g_nL]/I");
    T->Branch("g_key_Lp", g_key_Lp, "g_key_Lp[g_nL]/I");
    T->Branch("g_e_Lp", g_e_Lp, "g_e_Lp[g_nL]/D");
    T->Branch("g_pt_Lp", g_pt_Lp, "g_pt_Lp[g_nL]/D");
    T->Branch("g_eta_Lp", g_eta_Lp, "g_eta_Lp[g_nL]/D");
    T->Branch("g_phi_Lp", g_phi_Lp, "g_phi_Lp[g_nL]/D");
    T->Branch("g_im_Lp", g_im_Lp, "g_im_Lp[g_nL]/D");
    T->Branch("g_pid_Lpi", g_pid_Lpi, "g_pid_Lpi[g_nL]/I");
    T->Branch("g_gid_Lpi", g_gid_Lpi, "g_gid_Lpi[g_nL]/I");
    T->Branch("g_key_Lpi", g_key_Lpi, "g_key_Lpi[g_nL]/I");
    T->Branch("g_e_Lpi", g_e_Lpi, "g_e_Lpi[g_nL]/D");
    T->Branch("g_pt_Lpi", g_pt_Lpi, "g_pt_Lpi[g_nL]/D");
    T->Branch("g_eta_Lpi", g_eta_Lpi, "g_eta_Lpi[g_nL]/D");
    T->Branch("g_phi_Lpi", g_phi_Lpi, "g_phi_Lpi[g_nL]/D");
    T->Branch("g_im_Lpi", g_im_Lpi, "g_im_Lpi[g_nL]/D");
    T->Branch("g_x_stop_L", g_x_stop_L, "g_x_stop_L[g_nL]/D");
    T->Branch("g_y_stop_L", g_y_stop_L, "g_y_stop_L[g_nL]/D");
    T->Branch("g_z_stop_L", g_z_stop_L, "g_z_stop_L[g_nL]/D");
    T->Branch("g_pid_L", g_pid_L, "g_pid_L[g_nL]/I");
    T->Branch("g_gid_L", g_gid_L, "g_gid_L[g_nL]/I");
    T->Branch("g_key_L", g_key_L, "g_key_L[g_nL]/I");
    T->Branch("g_e_L", g_e_L, "g_e_L[g_nL]/D");
    T->Branch("g_pt_L", g_pt_L, "g_pt_L[g_nL]/D");
    T->Branch("g_eta_L", g_eta_L, "g_eta_L[g_nL]/D");
    T->Branch("g_phi_L", g_phi_L, "g_phi_L[g_nL]/D");
    T->Branch("g_im_L", g_im_L, "g_im_L[g_nL]/D");
    T->Branch("g_x_start_L", g_x_start_L, "g_x_start_L[g_nL]/D");
    T->Branch("g_y_start_L", g_y_start_L, "g_y_start_L[g_nL]/D");
    T->Branch("g_z_start_L", g_z_start_L, "g_z_start_L[g_nL]/D");
    T->Branch("g_pid_parent_L", g_pid_parent_L, "g_pid_parent_L[g_nL]/I");
    T->Branch("g_gid_parent_L", g_gid_parent_L, "g_gid_parent_L[g_nL]/I");
    T->Branch("g_key_parent_L", g_key_parent_L, "g_key_parent_L[g_nL]/I");
    T->Branch("g_drParton1_L", g_drParton1_L, "g_drParton1_L[g_nL]/D");
    T->Branch("g_drParton2_L", g_drParton2_L, "g_drParton2_L[g_nL]/D");
    T->Branch("g_index_L", g_index_L, "g_index_L[g_nL]/I");
    T->Branch("g_type_L", g_type_L, "g_type_L[g_nL]/I");
    T->Branch("g_dr_L", g_dr_L, "g_dr_L[g_nL]/D");
    T->Branch("g_deta_L", g_deta_L, "g_deta_L[g_nL]/D");
    T->Branch("g_dphi_L", g_dphi_L, "g_dphi_L[g_nL]/D");

    T->Branch("g_nA", &g_nA, "g_nA/I");
    T->Branch("g_pid_Ap", g_pid_Ap, "g_pid_Ap[g_nA]/I");
    T->Branch("g_gid_Ap", g_gid_Ap, "g_gid_Ap[g_nA]/I");
    T->Branch("g_key_Ap", g_key_Ap, "g_key_Ap[g_nA]/I");
    T->Branch("g_e_Ap", g_e_Ap, "g_e_Ap[g_nA]/D");
    T->Branch("g_pt_Ap", g_pt_Ap, "g_pt_Ap[g_nA]/D");
    T->Branch("g_eta_Ap", g_eta_Ap, "g_eta_Ap[g_nA]/D");
    T->Branch("g_phi_Ap", g_phi_Ap, "g_phi_Ap[g_nA]/D");
    T->Branch("g_im_Ap", g_im_Ap, "g_im_Ap[g_nA]/D");
    T->Branch("g_pid_Api", g_pid_Api, "g_pid_Api[g_nA]/I");
    T->Branch("g_gid_Api", g_gid_Api, "g_gid_Api[g_nA]/I");
    T->Branch("g_key_Api", g_key_Api, "g_key_Api[g_nA]/I");
    T->Branch("g_e_Api", g_e_Api, "g_e_Api[g_nA]/D");
    T->Branch("g_pt_Api", g_pt_Api, "g_pt_Api[g_nA]/D");
    T->Branch("g_eta_Api", g_eta_Api, "g_eta_Api[g_nA]/D");
    T->Branch("g_phi_Api", g_phi_Api, "g_phi_Api[g_nA]/D");
    T->Branch("g_im_Api", g_im_Api, "g_im_Api[g_nA]/D");
    T->Branch("g_x_stop_A", g_x_stop_A, "g_x_stop_A[g_nA]/D");
    T->Branch("g_y_stop_A", g_y_stop_A, "g_y_stop_A[g_nA]/D");
    T->Branch("g_z_stop_A", g_z_stop_A, "g_z_stop_A[g_nA]/D");
    T->Branch("g_pid_A", g_pid_A, "g_pid_A[g_nA]/I");
    T->Branch("g_gid_A", g_gid_A, "g_gid_A[g_nA]/I");
    T->Branch("g_key_A", g_key_A, "g_key_A[g_nA]/I");
    T->Branch("g_e_A", g_e_A, "g_e_A[g_nA]/D");
    T->Branch("g_pt_A", g_pt_A, "g_pt_A[g_nA]/D");
    T->Branch("g_eta_A", g_eta_A, "g_eta_A[g_nA]/D");
    T->Branch("g_phi_A", g_phi_A, "g_phi_A[g_nA]/D");
    T->Branch("g_im_A", g_im_A, "g_im_A[g_nA]/D");
    T->Branch("g_x_start_A", g_x_start_A, "g_x_start_A[g_nA]/D");
    T->Branch("g_y_start_A", g_y_start_A, "g_y_start_A[g_nA]/D");
    T->Branch("g_z_start_A", g_z_start_A, "g_z_start_A[g_nA]/D");
    T->Branch("g_pid_parent_A", g_pid_parent_A, "g_pid_parent_A[g_nA]/I");
    T->Branch("g_gid_parent_A", g_gid_parent_A, "g_gid_parent_A[g_nA]/I");
    T->Branch("g_key_parent_A", g_key_parent_A, "g_key_parent_A[g_nA]/I");
    T->Branch("g_drParton1_A", g_drParton1_A, "g_drParton1_A[g_nA]/D");
    T->Branch("g_drParton2_A", g_drParton2_A, "g_drParton2_A[g_nA]/D");
    T->Branch("g_index_A", g_index_A, "g_index_A[g_nA]/I");
    T->Branch("g_type_A", g_type_A, "g_type_A[g_nA]/I");
    T->Branch("g_dr_A", g_dr_A, "g_dr_A[g_nA]/D");
    T->Branch("g_deta_A", g_deta_A, "g_deta_A[g_nA]/D");
    T->Branch("g_dphi_A", g_dphi_A, "g_dphi_A[g_nA]/D");

    T->Branch("g_nK", &g_nK, "g_nK/I");
    T->Branch("g_pid_Kp", g_pid_Kp, "g_pid_Kp[g_nK]/I");
    T->Branch("g_gid_Kp", g_gid_Kp, "g_gid_Kp[g_nK]/I");
    T->Branch("g_key_Kp", g_key_Kp, "g_key_Kp[g_nK]/I");
    T->Branch("g_e_Kp", g_e_Kp, "g_e_Kp[g_nK]/D");
    T->Branch("g_pt_Kp", g_pt_Kp, "g_pt_Kp[g_nK]/D");
    T->Branch("g_eta_Kp", g_eta_Kp, "g_eta_Kp[g_nK]/D");
    T->Branch("g_phi_Kp", g_phi_Kp, "g_phi_Kp[g_nK]/D");
    T->Branch("g_im_Kp", g_im_Kp, "g_im_Kp[g_nK]/D");
    T->Branch("g_pid_Kpi", g_pid_Kpi, "g_pid_Kpi[g_nK]/I");
    T->Branch("g_gid_Kpi", g_gid_Kpi, "g_gid_Kpi[g_nK]/I");
    T->Branch("g_key_Kpi", g_key_Kpi, "g_key_Kpi[g_nK]/I");
    T->Branch("g_e_Kpi", g_e_Kpi, "g_e_Kpi[g_nK]/D");
    T->Branch("g_pt_Kpi", g_pt_Kpi, "g_pt_Kpi[g_nK]/D");
    T->Branch("g_eta_Kpi", g_eta_Kpi, "g_eta_Kpi[g_nK]/D");
    T->Branch("g_phi_Kpi", g_phi_Kpi, "g_phi_Kpi[g_nK]/D");
    T->Branch("g_im_Kpi", g_im_Kpi, "g_im_Kpi[g_nK]/D");
    T->Branch("g_x_stop_K", g_x_stop_K, "g_x_stop_K[g_nK]/D");
    T->Branch("g_y_stop_K", g_y_stop_K, "g_y_stop_K[g_nK]/D");
    T->Branch("g_z_stop_K", g_z_stop_K, "g_z_stop_K[g_nK]/D");
    T->Branch("g_pid_K", g_pid_K, "g_pid_K[g_nK]/I");
    T->Branch("g_gid_K", g_gid_K, "g_gid_K[g_nK]/I");
    T->Branch("g_key_K", g_key_K, "g_key_K[g_nK]/I");
    T->Branch("g_e_K", g_e_K, "g_e_K[g_nK]/D");
    T->Branch("g_pt_K", g_pt_K, "g_pt_K[g_nK]/D");
    T->Branch("g_eta_K", g_eta_K, "g_eta_K[g_nK]/D");
    T->Branch("g_phi_K", g_phi_K, "g_phi_K[g_nK]/D");
    T->Branch("g_im_K", g_im_K, "g_im_K[g_nK]/D");
    T->Branch("g_x_start_K", g_x_start_K, "g_x_start_K[g_nK]/D");
    T->Branch("g_y_start_K", g_y_start_K, "g_y_start_K[g_nK]/D");
    T->Branch("g_z_start_K", g_z_start_K, "g_z_start_K[g_nK]/D");
    T->Branch("g_pid_parent_K", g_pid_parent_K, "g_pid_parent_K[g_nK]/I");
    T->Branch("g_gid_parent_K", g_gid_parent_K, "g_gid_parent_K[g_nK]/I");
    T->Branch("g_key_parent_K", g_key_parent_K, "g_key_parent_K[g_nK]/I");
    T->Branch("g_drParton1_K", g_drParton1_K, "g_drParton1_K[g_nK]/D");
    T->Branch("g_drParton2_K", g_drParton2_K, "g_drParton2_K[g_nK]/D");
    T->Branch("g_index_K", g_index_K, "g_index_K[g_nK]/I");
    T->Branch("g_type_K", g_type_K, "g_type_K[g_nK]/I");
    T->Branch("g_dr_K", g_dr_K, "g_dr_K[g_nK]/D");
    T->Branch("g_deta_K", g_deta_K, "g_deta_K[g_nK]/D");
    T->Branch("g_dphi_K", g_dphi_K, "g_dphi_K[g_nK]/D");

    T->Branch("a_nL", &a_nL, "a_nL/I");
    T->Branch("a_pid_Lp", a_pid_Lp, "a_pid_Lp[a_nL]/I");
    T->Branch("a_gid_Lp", a_gid_Lp, "a_gid_Lp[a_nL]/I");
    T->Branch("a_key_Lp", a_key_Lp, "a_key_Lp[a_nL]/I");
    T->Branch("a_e_Lp", a_e_Lp, "a_e_Lp[a_nL]/D");
    T->Branch("a_pt_Lp", a_pt_Lp, "a_pt_Lp[a_nL]/D");
    T->Branch("a_eta_Lp", a_eta_Lp, "a_eta_Lp[a_nL]/D");
    T->Branch("a_phi_Lp", a_phi_Lp, "a_phi_Lp[a_nL]/D");
    T->Branch("a_dca_Lp", a_dca_Lp, "a_dca_Lp[a_nL]/D");
    T->Branch("a_flag_Lp", a_flag_Lp, "a_flag_Lp[a_nL]/I");
    T->Branch("a_nFit_Lp", a_nFit_Lp, "a_nFit_Lp[a_nL]/I");
    T->Branch("a_ratio_Lp", a_ratio_Lp, "a_ratio_Lp[a_nL]/D");
    T->Branch("a_pid_Lpi", a_pid_Lpi, "a_pid_Lpi[a_nL]/I");
    T->Branch("a_gid_Lpi", a_gid_Lpi, "a_gid_Lpi[a_nL]/I");
    T->Branch("a_key_Lpi", a_key_Lpi, "a_key_Lpi[a_nL]/I");
    T->Branch("a_e_Lpi", a_e_Lpi, "a_e_Lpi[a_nL]/D");
    T->Branch("a_pt_Lpi", a_pt_Lpi, "a_pt_Lpi[a_nL]/D");
    T->Branch("a_eta_Lpi", a_eta_Lpi, "a_eta_Lpi[a_nL]/D");
    T->Branch("a_phi_Lpi", a_phi_Lpi, "a_phi_Lpi[a_nL]/D");
    T->Branch("a_dca_Lpi", a_dca_Lpi, "a_dca_Lpi[a_nL]/D");
    T->Branch("a_flag_Lpi", a_flag_Lpi, "a_flag_Lpi[a_nL]/I");
    T->Branch("a_nFit_Lpi", a_nFit_Lpi, "a_nFit_Lpi[a_nL]/I");
    T->Branch("a_ratio_Lpi", a_ratio_Lpi, "a_ratio_Lpi[a_nL]/D");
    T->Branch("a_x_stop_L", a_x_stop_L, "a_x_stop_L[a_nL]/D");
    T->Branch("a_y_stop_L", a_y_stop_L, "a_y_stop_L[a_nL]/D");
    T->Branch("a_z_stop_L", a_z_stop_L, "a_z_stop_L[a_nL]/D");
    T->Branch("a_pt_L", a_pt_L, "a_pt_L[a_nL]/D");
    T->Branch("a_eta_L", a_eta_L, "a_eta_L[a_nL]/D");
    T->Branch("a_phi_L", a_phi_L, "a_phi_L[a_nL]/D");
    T->Branch("a_im_L", a_im_L, "a_im_L[a_nL]/D");
    T->Branch("a_dl_L", a_dl_L, "a_dl_L[a_nL]/D");
    T->Branch("a_dca2_L", a_dca2_L, "a_dca2_L[a_nL]/D");
    T->Branch("a_dcaV0_L", a_dcaV0_L, "a_dcaV0_L[a_nL]/D");
    T->Branch("a_crp_L", a_crp_L, "a_crp_L[a_nL]/D");
    T->Branch("a_pid_parent_L", a_pid_parent_L, "a_pid_parent_L[a_nL]/I");
    T->Branch("a_gid_parent_L", a_gid_parent_L, "a_gid_parent_L[a_nL]/I");
    T->Branch("a_key_parent_L", a_key_parent_L, "a_key_parent_L[a_nL]/I");
    T->Branch("a_drParton1_L", a_drParton1_L, "a_drParton1_L[a_nL]/D");
    T->Branch("a_drParton2_L", a_drParton2_L, "a_drParton2_L[a_nL]/D");
    T->Branch("a_index_L", a_index_L, "a_index_L[a_nL]/I");
    T->Branch("a_type_L", a_type_L, "a_type_L[a_nL]/I");
    T->Branch("a_dr_L", a_dr_L, "a_dr_L[a_nL]/D");
    T->Branch("a_deta_L", a_deta_L, "a_deta_L[a_nL]/D");
    T->Branch("a_dphi_L", a_dphi_L, "a_dphi_L[a_nL]/D");

    T->Branch("a_nA", &a_nA, "a_nA/I");
    T->Branch("a_pid_Ap", a_pid_Ap, "a_pid_Ap[a_nA]/I");
    T->Branch("a_gid_Ap", a_gid_Ap, "a_gid_Ap[a_nA]/I");
    T->Branch("a_key_Ap", a_key_Ap, "a_key_Ap[a_nA]/I");
    T->Branch("a_e_Ap", a_e_Ap, "a_e_Ap[a_nA]/D");
    T->Branch("a_pt_Ap", a_pt_Ap, "a_pt_Ap[a_nA]/D");
    T->Branch("a_eta_Ap", a_eta_Ap, "a_eta_Ap[a_nA]/D");
    T->Branch("a_phi_Ap", a_phi_Ap, "a_phi_Ap[a_nA]/D");
    T->Branch("a_dca_Ap", a_dca_Ap, "a_dca_Ap[a_nA]/D");
    T->Branch("a_flag_Ap", a_flag_Ap, "a_flag_Ap[a_nA]/I");
    T->Branch("a_nFit_Ap", a_nFit_Ap, "a_nFit_Ap[a_nA]/I");
    T->Branch("a_ratio_Ap", a_ratio_Ap, "a_ratio_Ap[a_nA]/D");
    T->Branch("a_pid_Api", a_pid_Api, "a_pid_Api[a_nA]/I");
    T->Branch("a_gid_Api", a_gid_Api, "a_gid_Api[a_nA]/I");
    T->Branch("a_key_Api", a_key_Api, "a_key_Api[a_nA]/I");
    T->Branch("a_e_Api", a_e_Api, "a_e_Api[a_nA]/D");
    T->Branch("a_pt_Api", a_pt_Api, "a_pt_Api[a_nA]/D");
    T->Branch("a_eta_Api", a_eta_Api, "a_eta_Api[a_nA]/D");
    T->Branch("a_phi_Api", a_phi_Api, "a_phi_Api[a_nA]/D");
    T->Branch("a_dca_Api", a_dca_Api, "a_dca_Api[a_nA]/D");
    T->Branch("a_flag_Api", a_flag_Api, "a_flag_Api[a_nA]/I");
    T->Branch("a_nFit_Api", a_nFit_Api, "a_nFit_Api[a_nA]/I");
    T->Branch("a_ratio_Api", a_ratio_Api, "a_ratio_Api[a_nA]/D");
    T->Branch("a_x_stop_A", a_x_stop_A, "a_x_stop_A[a_nA]/D");
    T->Branch("a_y_stop_A", a_y_stop_A, "a_y_stop_A[a_nA]/D");
    T->Branch("a_z_stop_A", a_z_stop_A, "a_z_stop_A[a_nA]/D");
    T->Branch("a_pt_A", a_pt_A, "a_pt_A[a_nA]/D");
    T->Branch("a_eta_A", a_eta_A, "a_eta_A[a_nA]/D");
    T->Branch("a_phi_A", a_phi_A, "a_phi_A[a_nA]/D");
    T->Branch("a_im_A", a_im_A, "a_im_A[a_nA]/D");
    T->Branch("a_dl_A", a_dl_A, "a_dl_A[a_nA]/D");
    T->Branch("a_dca2_A", a_dca2_A, "a_dca2_A[a_nA]/D");
    T->Branch("a_dcaV0_A", a_dcaV0_A, "a_dcaV0_A[a_nA]/D");
    T->Branch("a_crp_A", a_crp_A, "a_crp_A[a_nA]/D");
    T->Branch("a_pid_parent_A", a_pid_parent_A, "a_pid_parent_A[a_nA]/I");
    T->Branch("a_gid_parent_A", a_gid_parent_A, "a_gid_parent_A[a_nA]/I");
    T->Branch("a_key_parent_A", a_key_parent_A, "a_key_parent_A[a_nA]/I");
    T->Branch("a_drParton1_A", a_drParton1_A, "a_drParton1_A[a_nA]/D");
    T->Branch("a_drParton2_A", a_drParton2_A, "a_drParton2_A[a_nA]/D");
    T->Branch("a_index_A", a_index_A, "a_index_L[a_nA]/I");
    T->Branch("a_type_A", a_type_A, "a_type_L[a_nA]/I");
    T->Branch("a_dr_A", a_dr_A, "a_dr_L[a_nA]/D");
    T->Branch("a_deta_A", a_deta_A, "a_deta_L[a_nA]/D");
    T->Branch("a_dphi_A", a_dphi_A, "a_dphi_L[a_nA]/D");

    T->Branch("a_nK", &a_nK, "a_nK/I");
    T->Branch("a_pid_Kp", a_pid_Kp, "a_pid_Kp[a_nK]/I");
    T->Branch("a_gid_Kp", a_gid_Kp, "a_gid_Kp[a_nK]/I");
    T->Branch("a_key_Kp", a_key_Kp, "a_key_Kp[a_nK]/I");
    T->Branch("a_e_Kp", a_e_Kp, "a_e_Kp[a_nK]/D");
    T->Branch("a_pt_Kp", a_pt_Kp, "a_pt_Kp[a_nK]/D");
    T->Branch("a_eta_Kp", a_eta_Kp, "a_eta_Kp[a_nK]/D");
    T->Branch("a_phi_Kp", a_phi_Kp, "a_phi_Kp[a_nK]/D");
    T->Branch("a_dca_Kp", a_dca_Kp, "a_dca_Kp[a_nK]/D");
    T->Branch("a_flag_Kp", a_flag_Kp, "a_flag_Kp[a_nK]/I");
    T->Branch("a_nFit_Kp", a_nFit_Kp, "a_nFit_Kp[a_nK]/I");
    T->Branch("a_ratio_Kp", a_ratio_Kp, "a_ratio_Kp[a_nK]/D");
    T->Branch("a_pid_Kpi", a_pid_Kpi, "a_pid_Kpi[a_nK]/I");
    T->Branch("a_gid_Kpi", a_gid_Kpi, "a_gid_Kpi[a_nK]/I");
    T->Branch("a_key_Kpi", a_key_Kpi, "a_key_Kpi[a_nK]/I");
    T->Branch("a_e_Kpi", a_e_Kpi, "a_e_Kpi[a_nK]/D");
    T->Branch("a_pt_Kpi", a_pt_Kpi, "a_pt_Kpi[a_nK]/D");
    T->Branch("a_eta_Kpi", a_eta_Kpi, "a_eta_Kpi[a_nK]/D");
    T->Branch("a_phi_Kpi", a_phi_Kpi, "a_phi_Kpi[a_nK]/D");
    T->Branch("a_dca_Kpi", a_dca_Kpi, "a_dca_Kpi[a_nK]/D");
    T->Branch("a_flag_Kpi", a_flag_Kpi, "a_flag_Kpi[a_nK]/I");
    T->Branch("a_nFit_Kpi", a_nFit_Kpi, "a_nFit_Kpi[a_nK]/I");
    T->Branch("a_ratio_Kpi", a_ratio_Kpi, "a_ratio_Kpi[a_nK]/D");
    T->Branch("a_x_stop_K", a_x_stop_K, "a_x_stop_K[a_nK]/D");
    T->Branch("a_y_stop_K", a_y_stop_K, "a_y_stop_K[a_nK]/D");
    T->Branch("a_z_stop_K", a_z_stop_K, "a_z_stop_K[a_nK]/D");
    T->Branch("a_pt_K", a_pt_K, "a_pt_K[a_nK]/D");
    T->Branch("a_eta_K", a_eta_K, "a_eta_K[a_nK]/D");
    T->Branch("a_phi_K", a_phi_K, "a_phi_K[a_nK]/D");
    T->Branch("a_im_K", a_im_K, "a_im_K[a_nK]/D");
    T->Branch("a_dl_K", a_dl_K, "a_dl_K[a_nK]/D");
    T->Branch("a_dca2_K", a_dca2_K, "a_dca2_K[a_nK]/D");
    T->Branch("a_dcaV0_K", a_dcaV0_K, "a_dcaV0_K[a_nK]/D");
    T->Branch("a_crp_K", a_crp_K, "a_crp_K[a_nK]/D");
    T->Branch("a_pid_parent_K", a_pid_parent_K, "a_pid_parent_K[a_nK]/I");
    T->Branch("a_gid_parent_K", a_gid_parent_K, "a_gid_parent_K[a_nK]/I");
    T->Branch("a_key_parent_K", a_key_parent_K, "a_key_parent_K[a_nK]/I");
    T->Branch("a_drParton1_K", a_drParton1_K, "a_drParton1_K[a_nK]/D");
    T->Branch("a_drParton2_K", a_drParton2_K, "a_drParton2_K[a_nK]/D");
    T->Branch("a_index_K", a_index_K, "a_index_K[a_nK]/I");
    T->Branch("a_type_K", a_type_K, "a_type_K[a_nK]/I");
    T->Branch("a_dr_K", a_dr_K, "a_dr_K[a_nK]/D");
    T->Branch("a_deta_K", a_deta_K, "a_deta_K[a_nK]/D");
    T->Branch("a_dphi_K", a_dphi_K, "a_dphi_K[a_nK]/D");

    T->Branch("m_nL", &m_nL, "m_nL/I");
    T->Branch("m_dEdx_Lp", m_dEdx_Lp, "m_dEdx_Lp[m_nL]/D");
    T->Branch("m_nSigP_Lp", m_nSigP_Lp, "m_nSigP_Lp[m_nL]/D");
    T->Branch("m_nSigPi_Lp", m_nSigPi_Lp, "m_nSigPi_Lp[m_nL]/D");
    T->Branch("m_pt_Lp", m_pt_Lp, "m_pt_Lp[m_nL]/D");
    T->Branch("m_eta_Lp", m_eta_Lp, "m_eta_Lp[m_nL]/D");
    T->Branch("m_phi_Lp", m_phi_Lp, "m_phi_Lp[m_nL]/D");
    T->Branch("m_dca_Lp", m_dca_Lp, "m_dca_Lp[m_nL]/D");
    T->Branch("m_qaT_Lp", m_qaT_Lp, "m_qaT_Lp[m_nL]/I");
    T->Branch("m_idT_Lp", m_idT_Lp, "m_idT_Lp[m_nL]/I");
    T->Branch("m_tof_Lp", m_tof_Lp, "m_tof_Lp[m_nL]/I");
    T->Branch("m_beta_Lp", m_beta_Lp, "m_beta_Lp[m_nL]/D");
    T->Branch("m_dEdx_Lpi", m_dEdx_Lpi, "m_dEdx_Lpi[m_nL]/D");
    T->Branch("m_nSigP_Lpi", m_nSigP_Lpi, "m_nSigP_Lpi[m_nL]/D");
    T->Branch("m_nSigPi_Lpi", m_nSigPi_Lpi, "m_nSigPi_Lpi[m_nL]/D");
    T->Branch("m_pt_Lpi", m_pt_Lpi, "m_pt_Lpi[m_nL]/D");
    T->Branch("m_eta_Lpi", m_eta_Lpi, "m_eta_Lpi[m_nL]/D");
    T->Branch("m_phi_Lpi", m_phi_Lpi, "m_phi_Lpi[m_nL]/D");
    T->Branch("m_dca_Lpi", m_dca_Lpi, "m_dca_Lpi[m_nL]/D");
    T->Branch("m_qaT_Lpi", m_qaT_Lpi, "m_qaT_Lpi[m_nL]/I");
    T->Branch("m_idT_Lpi", m_idT_Lpi, "m_idT_Lpi[m_nL]/I");
    T->Branch("m_tof_Lpi", m_tof_Lpi, "m_tof_Lpi[m_nL]/I");
    T->Branch("m_beta_Lpi", m_beta_Lpi, "m_beta_Lpi[m_nL]/D");
    T->Branch("m_dca2_L", m_dca2_L, "m_dca2_L[m_nL]/D");
    T->Branch("m_dcaV0_L", m_dcaV0_L, "m_dcaV0_L[m_nL]/D");
    T->Branch("m_crp_L", m_crp_L, "m_crp_L[m_nL]/D");
    T->Branch("m_dl_L", m_dl_L, "m_dl_L[m_nL]/D");
    T->Branch("m_im_L", m_im_L, "m_im_L[m_nL]/D");
    T->Branch("m_V0x_L", m_V0x_L, "m_V0x_L[m_nL]/D");
    T->Branch("m_V0y_L", m_V0y_L, "m_V0y_L[m_nL]/D");
    T->Branch("m_V0z_L", m_V0z_L, "m_V0z_L[m_nL]/D");
    T->Branch("m_pt_L", m_pt_L, "m_pt_L[m_nL]/D");
    T->Branch("m_eta_L", m_eta_L, "m_eta_L[m_nL]/D");
    T->Branch("m_phi_L", m_phi_L, "m_phi_L[m_nL]/D");
    T->Branch("m_drParton1_L", m_drParton1_L, "m_drParton1_L[m_nL]/D");
    T->Branch("m_drParton2_L", m_drParton2_L, "m_drParton2_L[m_nL]/D");
    T->Branch("m_index_L", m_index_L, "m_index_L[m_nL]/I");
    T->Branch("m_type_L", m_type_L, "m_type_L[m_nL]/I");
    T->Branch("m_dr_L", m_dr_L, "m_dr_L[m_nL]/D");
    T->Branch("m_deta_L", m_deta_L, "m_deta_L[m_nL]/D");
    T->Branch("m_dphi_L", m_dphi_L, "m_dphi_L[m_nL]/D");

    T->Branch("m_nA", &m_nA, "m_nA/I");
    T->Branch("m_dEdx_Ap", m_dEdx_Ap, "m_dEdx_Ap[m_nA]/D");
    T->Branch("m_nSigP_Ap", m_nSigP_Ap, "m_nSigP_Ap[m_nA]/D");
    T->Branch("m_nSigPi_Ap", m_nSigPi_Ap, "m_nSigPi_Ap[m_nA]/D");
    T->Branch("m_pt_Ap", m_pt_Ap, "m_pt_Ap[m_nA]/D");
    T->Branch("m_eta_Ap", m_eta_Ap, "m_eta_Ap[m_nA]/D");
    T->Branch("m_phi_Ap", m_phi_Ap, "m_phi_Ap[m_nA]/D");
    T->Branch("m_dca_Ap", m_dca_Ap, "m_dca_Ap[m_nA]/D");
    T->Branch("m_qaT_Ap", m_qaT_Ap, "m_qaT_Ap[m_nA]/I");
    T->Branch("m_idT_Ap", m_idT_Ap, "m_idT_Ap[m_nA]/I");
    T->Branch("m_tof_Ap", m_tof_Ap, "m_tof_Ap[m_nA]/I");
    T->Branch("m_beta_Ap", m_beta_Ap, "m_beta_Ap[m_nA]/D");
    T->Branch("m_dEdx_Api", m_dEdx_Api, "m_dEdx_Api[m_nA]/D");
    T->Branch("m_nSigP_Api", m_nSigP_Api, "m_nSigP_Api[m_nA]/D");
    T->Branch("m_nSigPi_Api", m_nSigPi_Api, "m_nSigPi_Api[m_nA]/D");
    T->Branch("m_pt_Api", m_pt_Api, "m_pt_Api[m_nA]/D");
    T->Branch("m_eta_Api", m_eta_Api, "m_eta_Api[m_nA]/D");
    T->Branch("m_phi_Api", m_phi_Api, "m_phi_Api[m_nA]/D");
    T->Branch("m_dca_Api", m_dca_Api, "m_dca_Api[m_nA]/D");
    T->Branch("m_qaT_Api", m_qaT_Api, "m_qaT_Api[m_nA]/I");
    T->Branch("m_idT_Api", m_idT_Api, "m_idT_Api[m_nA]/I");
    T->Branch("m_tof_Api", m_tof_Api, "m_tof_Api[m_nA]/I");
    T->Branch("m_beta_Api", m_beta_Api, "m_beta_Api[m_nA]/D");
    T->Branch("m_dca2_A", m_dca2_A, "m_dca2_A[m_nA]/D");
    T->Branch("m_dcaV0_A", m_dcaV0_A, "m_dcaV0_A[m_nA]/D");
    T->Branch("m_crp_A", m_crp_A, "m_crp_A[m_nA]/D");
    T->Branch("m_dl_A", m_dl_A, "m_dl_A[m_nA]/D");
    T->Branch("m_im_A", m_im_A, "m_im_A[m_nA]/D");
    T->Branch("m_V0x_A", m_V0x_A, "m_V0x_A[m_nA]/D");
    T->Branch("m_V0y_A", m_V0y_A, "m_V0y_A[m_nA]/D");
    T->Branch("m_V0z_A", m_V0z_A, "m_V0z_A[m_nA]/D");
    T->Branch("m_pt_A", m_pt_A, "m_pt_A[m_nA]/D");
    T->Branch("m_eta_A", m_eta_A, "m_eta_A[m_nA]/D");
    T->Branch("m_phi_A", m_phi_A, "m_phi_A[m_nA]/D");
    T->Branch("m_drParton1_A", m_drParton1_A, "m_drParton1_A[m_nA]/D");
    T->Branch("m_drParton2_A", m_drParton2_A, "m_drParton2_A[m_nA]/D");
    T->Branch("m_index_A", m_index_A, "m_index_A[m_nA]/I");
    T->Branch("m_type_A", m_type_A, "m_type_A[m_nA]/I");
    T->Branch("m_dr_A", m_dr_A, "m_dr_A[m_nA]/D");
    T->Branch("m_deta_A", m_deta_A, "m_deta_A[m_nA]/D");
    T->Branch("m_dphi_A", m_dphi_A, "m_dphi_A[m_nA]/D");

    T->Branch("m_nK", &m_nK, "m_nK/I");
    T->Branch("m_dEdx_Kp", m_dEdx_Kp, "m_dEdx_Kp[m_nK]/D");
    T->Branch("m_nSigP_Kp", m_nSigP_Kp, "m_nSigP_Kp[m_nK]/D");
    T->Branch("m_nSigPi_Kp", m_nSigPi_Kp, "m_nSigPi_Kp[m_nK]/D");
    T->Branch("m_pt_Kp", m_pt_Kp, "m_pt_Kp[m_nK]/D");
    T->Branch("m_eta_Kp", m_eta_Kp, "m_eta_Kp[m_nK]/D");
    T->Branch("m_phi_Kp", m_phi_Kp, "m_phi_Kp[m_nK]/D");
    T->Branch("m_dca_Kp", m_dca_Kp, "m_dca_Kp[m_nK]/D");
    T->Branch("m_qaT_Kp", m_qaT_Kp, "m_qaT_Kp[m_nK]/I");
    T->Branch("m_idT_Kp", m_idT_Kp, "m_idT_Kp[m_nK]/I");
    T->Branch("m_tof_Kp", m_tof_Kp, "m_tof_Kp[m_nK]/I");
    T->Branch("m_beta_Kp", m_beta_Kp, "m_beta_Kp[m_nK]/D");
    T->Branch("m_dEdx_Kpi", m_dEdx_Kpi, "m_dEdx_Kpi[m_nK]/D");
    T->Branch("m_nSigP_Kpi", m_nSigP_Kpi, "m_nSigP_Kpi[m_nK]/D");
    T->Branch("m_nSigPi_Kpi", m_nSigPi_Kpi, "m_nSigPi_Kpi[m_nK]/D");
    T->Branch("m_pt_Kpi", m_pt_Kpi, "m_pt_Kpi[m_nK]/D");
    T->Branch("m_eta_Kpi", m_eta_Kpi, "m_eta_Kpi[m_nK]/D");
    T->Branch("m_phi_Kpi", m_phi_Kpi, "m_phi_Kpi[m_nK]/D");
    T->Branch("m_dca_Kpi", m_dca_Kpi, "m_dca_Kpi[m_nK]/D");
    T->Branch("m_qaT_Kpi", m_qaT_Kpi, "m_qaT_Kpi[m_nK]/I");
    T->Branch("m_idT_Kpi", m_idT_Kpi, "m_idT_Kpi[m_nK]/I");
    T->Branch("m_tof_Kpi", m_tof_Kpi, "m_tof_Kpi[m_nK]/I");
    T->Branch("m_beta_Kpi", m_beta_Kpi, "m_beta_Kpi[m_nK]/D");
    T->Branch("m_dca2_K", m_dca2_K, "m_dca2_K[m_nK]/D");
    T->Branch("m_dcaV0_K", m_dcaV0_K, "m_dcaV0_K[m_nK]/D");
    T->Branch("m_crp_K", m_crp_K, "m_crp_K[m_nK]/D");
    T->Branch("m_dl_K", m_dl_K, "m_dl_K[m_nK]/D");
    T->Branch("m_im_K", m_im_K, "m_im_K[m_nK]/D");
    T->Branch("m_V0x_K", m_V0x_K, "m_V0x_K[m_nK]/D");
    T->Branch("m_V0y_K", m_V0y_K, "m_V0y_K[m_nK]/D");
    T->Branch("m_V0z_K", m_V0z_K, "m_V0z_K[m_nK]/D");
    T->Branch("m_pt_K", m_pt_K, "m_pt_K[m_nK]/D");
    T->Branch("m_eta_K", m_eta_K, "m_eta_K[m_nK]/D");
    T->Branch("m_phi_K", m_phi_K, "m_phi_K[m_nK]/D");
    T->Branch("m_drParton1_K", m_drParton1_K, "m_drParton1_K[m_nK]/D");
    T->Branch("m_drParton2_K", m_drParton2_K, "m_drParton2_K[m_nK]/D");
    T->Branch("m_index_K", m_index_K, "m_index_K[m_nK]/I");
    T->Branch("m_type_K", m_type_K, "m_type_K[m_nK]/I");
    T->Branch("m_dr_K", m_dr_K, "m_dr_K[m_nK]/D");
    T->Branch("m_deta_K", m_deta_K, "m_deta_K[m_nK]/D");
    T->Branch("m_dphi_K", m_dphi_K, "m_dphi_K[m_nK]/D");

    T->Branch("njet", &njet, "njet/I");
    T->Branch("IsJP0s", &IsJP0s, "IsJP0s[njet]/I");
    T->Branch("IsJP1s", &IsJP1s, "IsJP1s[njet]/I");
    T->Branch("IsJP2s", &IsJP2s, "IsJP2s[njet]/I");
    T->Branch("IsAJPs", &IsAJPs, "IsAJPs[njet]/I");
    T->Branch("J_sv", J_sv, "J_sv[njet]/I");
    T->Branch("J_deteta", J_deteta, "J_deteta[njet]/D");
    T->Branch("J_eta", J_eta, "J_eta[njet]/D");
    T->Branch("J_pt", J_pt, "J_pt[njet]/D");
    T->Branch("J_phi", J_phi, "J_phi[njet]/D");
    T->Branch("J_rt", J_rt, "J_rt[njet]/D");
    T->Branch("J_E", J_E, "J_E[njet]/D");
    T->Branch("J_btowEt", J_btowEt, "J_btowEt[njet]/D");
    T->Branch("J_tpcEt", J_tpcEt, "J_tpcEt[njet]/D");
    T->Branch("J_charge", J_charge, "J_charge[njet]/D");
    T->Branch("J_ncell", J_ncell, "J_ncell[njet]/I");
    T->Branch("J_ntra", J_ntra, "J_ntra[njet]/I");
    T->Branch("J_drParton1", J_drParton1, "J_drParton1[njet]/D");
    T->Branch("J_drParton2", J_drParton2, "J_drParton2[njet]/D");
}

map<int,double> getMAP_ptHweight( const int ptV )
{
    string fn = "weight_ptH/pt_hard_weight_V" + to_string(ptV) + ".txt";
    ifstream inStream(fn.c_str());
    string line;
    int key;
    double value;
    map<int,double> wMap;
    while(getline(inStream, line)) {
        stringstream sstr(line);
        sstr >> key >> value;
        //cout << key << "\t" << value << endl;
        wMap[key] = value;
    }
    for (const auto &pair : wMap) {
        cout << pair.first << ": " << pair.second << '\n';
    }
    return wMap;
}

/*
map<int,double> getMAP_pvzweight( const int ptV )
{
	string fn = "dat/pt_hard_weight_V" + string(ptV) + ".txt";
    ifstream inStream(fn.c_str());
    string line;
    int key;
    double value;
    map<int,double> wMap;
    while(getline(inStream, line)) {
        stringstream sstr(line);
        sstr >> key >> value;
        wMap[key] = value;
    }
    for (const auto &pair : wMap) {
        cout << pair.first << ": " << pair.second << '\n';
    }
    return wMap;
}
*/


